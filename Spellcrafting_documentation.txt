Spellcrafting System Documentation
================================

1. Current Implementation
------------------------
The spellcrafting system allows players to modify their spells in-game through a Spellbook interface. The current implementation focuses on element modification, where players can switch between Fire and Ice elements for their spells.

2. Core Components
----------------
2.1 Spellbook UI (spellbook.tscn)
    • Contains element selection buttons
    • Toggleable interface (Tab key)
    • Visual feedback for selected element

2.2 Spell Grid (hud.tscn)
    • Displays available spell slots
    • Shows spell icons
    • Handles spell casting

2.3 Ground Target Spell (ground_target_spell.tscn)
    • Implements the actual spell behavior
    • Handles element-specific effects
    • Manages spell lifetime and damage

3. Implementation Details
-----------------------
3.1 Element Selection System
    • Uses an enum for type safety:
      enum Element { FIRE, ICE }
    • Element state is stored in the SpellGrid
    • Changes are applied immediately to new spell casts

3.2 UI Implementation
    • Spellbook uses a simple button-based interface
    • Visual feedback through color changes
    • Pauses game when open for focused spell selection

3.3 Spell Modification Flow
    a) Player opens Spellbook (Tab key)
    b) Selects desired element
    c) Changes are stored in SpellGrid
    d) New spells cast use the selected element

4. Technical Requirements
-----------------------
4.1 Scene Structure
    • MainScene
      - HUD (contains SpellGrid)
      - Spellbook
      - Player
      - GameManager

4.2 Node Connections
    • Spellbook → SpellGrid: Element selection
    • SpellGrid → GroundTargetSpell: Element application
    • GameManager: Coordinates between components

4.3 Signal System
    • Element selection signals
    • Spell casting signals
    • UI state signals

5. Design Decisions
-----------------
5.1 Spellbook Interface
    Alternatives Considered:

    a) Radial Menu
       Pros:
       • Quick selection
       • Good for many elements
       
       Cons:
       • More complex to implement
       • Might be confusing
       
       Why Not: Current needs are simple, buttons are sufficient

    b) Hotkey System
       Pros:
       • Fast switching
       • No UI needed
       
       Cons:
       • Limited by keyboard keys
       • Less intuitive
       
       Why Not: Would limit future expansion

    c) Current Button System
       Pros:
       • Clear, intuitive
       • Scalable
       
       Cons:
       • Requires UI interaction
       
       Why Chosen: Best balance of usability and future-proofing

5.2 Element Storage
    Alternatives Considered:

    a) Player-based Storage
       Pros:
       • Centralized control
       
       Cons:
       • More complex player script
       
       Why Not: Violates separation of concerns

    b) Global Singleton
       Pros:
       • Easy access from anywhere
       
       Cons:
       • Harder to test
       • More complex
       
       Why Not: Overkill for current needs

    c) Current SpellGrid Storage
       Pros:
       • Logical location
       • Clean separation
       
       Cons:
       • Requires proper scene setup
       
       Why Chosen: Best balance of organization and simplicity

5.3 Element Application
    Alternatives Considered:

    a) Runtime Element Switching
       Pros:
       • More flexible
       
       Cons:
       • More complex
       • Potential bugs
       
       Why Not: Unnecessary complexity

    b) Spell Instance Modification
       Pros:
       • More control
       
       Cons:
       • More complex
       • Harder to maintain
       
       Why Not: Overkill for current needs

    c) Current Pre-cast Selection
       Pros:
       • Simple
       • Reliable
       
       Cons:
       • Less flexible
       
       Why Chosen: Best balance of simplicity and reliability

6. Required Components
--------------------
6.1 Scene Files
    • spellbook.tscn
    • hud.tscn
    • ground_target_spell.tscn

6.2 Script Files
    • scripts/ui/spellbook.gd
    • scripts/ui/spell_grid.gd
    • scripts/spells/ground_target_spell.gd

6.3 Dependencies
    • Godot 4.x
    • Proper scene tree setup
    • Correct node paths

7. Future Expansion Possibilities
------------------------------
7.1 Element System
    • Add more elements
    • Implement element combinations
    • Add element-specific effects

7.2 Spell Modification
    • Add more modifiable attributes
    • Implement spell customization
    • Add spell combinations

7.3 UI Improvements
    • Add more visual feedback
    • Implement drag-and-drop
    • Add spell previews

8. Implementation Steps
---------------------
8.1 Basic Setup
    • Create Spellbook scene
    • Set up button layout
    • Implement basic toggle functionality

8.2 Element System
    • Implement element enum
    • Add element selection logic
    • Set up visual feedback

8.3 Spell Integration
    • Connect Spellbook to SpellGrid
    • Implement element application
    • Add spell casting logic

8.4 Polish
    • Add visual feedback
    • Implement proper pause handling
    • Add sound effects

Note: This documentation reflects the current state of the spellcrafting system. The system is designed to be expandable, allowing for future additions while maintaining a clean and maintainable codebase. 